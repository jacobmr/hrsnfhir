# requirements.txt
fastapi==0.104.1
uvicorn[standard]==0.24.0
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
alembic==1.12.1
redis==5.0.1
celery==5.3.4
pydantic==2.5.0
pydantic-settings==2.0.3
python-multipart==0.0.6
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-dotenv==1.0.0
fhir.resources==7.0.2
pytest==7.4.3
pytest-asyncio==0.21.1
httpx==0.25.2
black==23.11.0
isort==5.12.0
flake8==6.1.0

# startup.sh
#!/bin/bash

echo "Starting HRSN FHIR Processing Server..."

# Check if virtual environment exists
if [ ! -d "venv" ]; then
    echo "Creating virtual environment..."
    python3 -m venv venv
fi

# Activate virtual environment
source venv/bin/activate

# Install/upgrade dependencies
echo "Installing dependencies..."
pip install -r requirements.txt

# Create logs directory
mkdir -p logs

# Check if database is accessible
echo "Checking database connection..."
python3 -c "
from app.database import engine
try:
    with engine.connect() as conn:
        conn.execute('SELECT 1')
    print('✓ Database connection successful')
except Exception as e:
    print(f'✗ Database connection failed: {e}')
    exit(1)
"

# Create database tables
echo "Creating database tables..."
python3 -c "
from app.models import Base
from app.database import engine
Base.metadata.create_all(bind=engine)
print('✓ Database tables created/updated')
"

# Start the server
echo "Starting FastAPI server..."
uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

# test_bundle.py - Script to test with sample bundles
#!/usr/bin/env python3

import requests
import json
import sys

def test_bundle(bundle_file, api_url="http://localhost:8000", api_key="hrsn-dev-key-12345"):
    """Test submitting a FHIR bundle to the server"""
    
    try:
        with open(bundle_file, 'r') as f:
            bundle_data = json.load(f)
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        # Submit bundle
        response = requests.post(f"{api_url}/fhir/Bundle", json=bundle_data, headers=headers)
        
        if response.status_code == 200:
            result = response.json()
            print(f"✓ Bundle submitted successfully")
            print(f"  Bundle ID: {result['bundle_id']}")
            print(f"  Processing ID: {result['processing_id']}")
            print(f"  Status: {result['status']}")
            return result
        else:
            print(f"✗ Error submitting bundle: {response.status_code}")
            print(f"  Response: {response.text}")
            return None
            
    except FileNotFoundError:
        print(f"✗ Bundle file not found: {bundle_file}")
        return None
    except Exception as e:
        print(f"✗ Error: {e}")
        return None

def test_health(api_url="http://localhost:8000"):
    """Test server health"""
    try:
        response = requests.get(f"{api_url}/health")
        if response.status_code == 200:
            health = response.json()
            print(f"✓ Server health: {health['status']}")
            print(f"  Database: {health['database']}")
            print(f"  Version: {health['version']}")
            return True
        else:
            print(f"✗ Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"✗ Cannot connect to server: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python test_bundle.py <bundle_file.json>")
        print("       python test_bundle.py health")
        sys.exit(1)
    
    if sys.argv[1] == "health":
        test_health()
    else:
        test_bundle(sys.argv[1])

# docker-compose.yml
version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/hrsn
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  db:
    image: postgres:14
    environment:
      - POSTGRES_DB=hrsn
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

  worker:
    build: .
    command: celery -A app.worker worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/hrsn
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    restart: unless-stopped

volumes:
  postgres_data:

# Dockerfile
FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python deps
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application
COPY . .

# Create logs directory
RUN mkdir -p logs

# Expose port
EXPOSE 8000

# Run application
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]